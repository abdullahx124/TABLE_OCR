# Form implementation generated from reading ui file 'Interface_3.ui'
#
# Created by: PyQt6 UI code generator 6.6.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6 import QtCore, QtGui, QtWidgets
import sys
from PyQt6.QtWidgets import QApplication, QMainWindow, QPushButton, QFileDialog
from ACPL_Customized import ACPL_function
from CPB_Customization import CPB_function
from Collective_Customized import Collective_function
from DEC_Customization import DEC_function
from NICL_Customization import NICL_function
from Service_Customization import Service_function
from Valves_Customization import Valves_function
from Piping_Cusomization import Piping_function
from Image_Customization import Image_function
from pdf_processing import PDFConverter
import os
from table_detection import table_detection_main
from table_structure import table_structure_main
from easy_ocr_on_table import easy_ocr_main
from csv_file import csv_file_main
import argparse
from PyQt6.QtCore import Qt, QThread, pyqtSignal

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(307, 315)
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.uploadCNIC = QtWidgets.QPushButton(parent=self.centralwidget,  clicked = lambda: self.open_file_dialog())
        self.uploadCNIC.setGeometry(QtCore.QRect(30, 90, 120, 35))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.uploadCNIC.setFont(font)
        self.uploadCNIC.setObjectName("uploadCNIC")
        self.Admission_Title = QtWidgets.QLabel(parent=self.centralwidget)
        self.Admission_Title.setGeometry(QtCore.QRect(80, 20, 151, 61))
        font = QtGui.QFont()
        font.setPointSize(19)
        font.setBold(True)
        font.setWeight(75)
        self.Admission_Title.setFont(font)
        self.Admission_Title.setStyleSheet("\n"
"color: rgb(0, 0, 0);")
        self.Admission_Title.setObjectName("Admission_Title")
        self.progressBar = QtWidgets.QProgressBar(parent=self.centralwidget)
        self.progressBar.setGeometry(QtCore.QRect(60, 190, 191, 23))
        self.progressBar.setStyleSheet("QProgressBar{\n"
"    background-color: rgb(181, 181, 181);\n"
"color: rgb(255, 255, 255);\n"
"border-style:solid;\n"
"border-radius:10px;\n"
"text-align:center;\n"
"}\n"
"QProgressBar::chunk{\n"
"border-radius: 10px;\n"
"    background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0 rgba(185, 105, 254, 255), stop:1 rgba(106, 211, 255, 255));\n"
"}")
        self.progressBar.setProperty("value", 0)
        self.progressBar.setTextVisible(True)
        self.progressBar.setInvertedAppearance(False)
        self.progressBar.setObjectName("progressBar")
        self.CNICStudent = QtWidgets.QTextEdit(parent=self.centralwidget)
        self.CNICStudent.setGeometry(QtCore.QRect(30, 250, 251, 30))
        self.CNICStudent.setFrameShape(QtWidgets.QFrame.Shape.Box)
        self.CNICStudent.setFrameShadow(QtWidgets.QFrame.Shadow.Plain)
        self.CNICStudent.setObjectName("CNICStudent")
        self.Customization = QtWidgets.QComboBox(parent=self.centralwidget)
        self.Customization.setGeometry(QtCore.QRect(170, 90, 120, 35))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.Customization.setFont(font)
        self.Customization.setEditable(False)
        self.Customization.setInsertPolicy(QtWidgets.QComboBox.InsertPolicy.InsertAtBottom)
        self.Customization.setObjectName("Customization")
        self.Customization.addItem("")
        self.Customization.addItem("")
        self.Customization.addItem("")
        self.Customization.addItem("")
        self.Customization.addItem("")
        self.Customization.addItem("")
        self.Customization.addItem("")
        self.Customization.addItem("")
        self.Customization.addItem("")
        self.submit = QtWidgets.QPushButton(parent=self.centralwidget,  clicked = lambda: self.run())
        self.submit.setGeometry(QtCore.QRect(100, 140, 120, 35))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.submit.setFont(font)
        self.submit.setObjectName("submit")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.uploadCNIC.setText(_translate("MainWindow", "Upload"))
        self.Admission_Title.setText(_translate("MainWindow", "TABLE OCR"))
        self.CNICStudent.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"center\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.Customization.setItemText(0, _translate("MainWindow", "None"))
        self.Customization.setItemText(1, _translate("MainWindow", "ACPL"))
        self.Customization.setItemText(2, _translate("MainWindow", "CPB"))
        self.Customization.setItemText(3, _translate("MainWindow", "Collective"))
        self.Customization.setItemText(4, _translate("MainWindow", "DEC"))
        self.Customization.setItemText(5, _translate("MainWindow", "NICL"))
        self.Customization.setItemText(6, _translate("MainWindow", "Service"))
        self.Customization.setItemText(7, _translate("MainWindow", "Valves"))
        self.Customization.setItemText(8, _translate("MainWindow", "Piping"))
        self.submit.setText(_translate("MainWindow", "RUN"))
    def open_file_dialog(self):
        self.progressBar.setValue(0)
        file_dialog = QFileDialog()
        file_dialog.setWindowTitle("Select a File")
        file_dialog.setFileMode(QFileDialog.FileMode.ExistingFile)

        if file_dialog.exec() == QFileDialog.DialogCode.Accepted:
            self.selected_files = file_dialog.selectedFiles()
            if self.selected_files:
                file_path = self.selected_files[0]
                # print("Selected file:", file_path)
                # You can store the file path in a variable or use it as needed
                # For example:
                self.file_path = file_path

        self.progressBar.setValue(10)

    def run(self):
        self.progressBar.setValue(10)
        import os
        self.file = os.path.basename(self.file_path)
        file_base_name, file_extension = os.path.splitext(self.file)
        # print(file_base_name)
        file_name = self.file_path       # Create the PDF path using the provided PDF name
        customization = self.Customization.currentText()
        # print(customization)
        self.progressBar.setValue(15)

        file_type = file_extension
        print(file_type)
        print(customization)

        # print(file_name, customization)
        self.progressBar.setValue(20)
        if file_type == ".pdf" or file_type == ".PDF" and customization == None:
            print("This function is running.")
            self.progressBar.setValue(30)
            pdf_converter = PDFConverter(file_name, dpi=300)
            pdf_name = file_base_name
            self.progressBar.setValue(40)
            images_list = pdf_converter.pdf_to_images()
            self.progressBar.setValue(50)
            cropped_table_list = table_detection_main(images_list, "default")
            cell_coordinates, cropped_table_list = table_structure_main(cropped_table_list, "default")
            self.progressBar.setValue(80)
            data = easy_ocr_main(cell_coordinates, cropped_table_list)
            csv_file_main(pdf_name, data)
            self.progressBar.setValue(100)
        elif file_type == ".PNG" or file_type == ".JPG" or file_type == ".JPEG" and customization == None:
            self.progressBar.setValue(30)
            pdf_path = file_name
            special = "Image"
            self.progressBar.setValue(50)
            Image_function(pdf_path, condition=special)
        elif file_type == ".pdf" or file_type == ".PDF" and customization == "ACPL":
            self.progressBar.setValue(30)
            pdf_path = file_name
            special = customization
            self.progressBar.setValue(50)
            ACPL_function(pdf_path, special)
        elif file_type == ".pdf" or file_type == ".PDF" and customization == "Collective":
            self.progressBar.setValue(30)
            pdf_path = file_name
            special = customization
            self.progressBar.setValue(50)
            Collective_function(pdf_path, special)
        elif file_type == ".pdf" or file_type == ".PDF" and customization == "CPB":
            self.progressBar.setValue(30)
            pdf_path = file_name
            special = customization
            self.progressBar.setValue(50)
            CPB_function(pdf_path, special)
        elif file_type == ".pdf" or file_type == ".PDF" and customization == "DEC":
            self.progressBar.setValue(30)
            pdf_path = file_name
            special = customization
            self.progressBar.setValue(50)
            DEC_function(pdf_path, special)
        elif file_type == ".pdf" or file_type == ".PDF" and customization == "NICL":
            self.progressBar.setValue(30)
            pdf_path = file_name
            special = customization
            self.progressBar.setValue(50)
            NICL_function(pdf_path, special)
        elif file_type == ".pdf" or file_type == ".PDF" and customization == "Piping":
            self.progressBar.setValue(30)
            pdf_path = file_name
            special = customization
            self.progressBar.setValue(50)
            Piping_function(pdf_path, special)
        elif file_type == ".pdf" or file_type == ".PDF" and customization == "Service":
            self.progressBar.setValue(30)
            pdf_path = file_name
            special = customization
            self.progressBar.setValue(50)
            Service_function(pdf_path, special)
        elif file_type == ".pdf" or file_type == ".PDF" and customization == "Valves":
            self.progressBar.setValue(30)
            pdf_path = file_name
            special = customization
            self.progressBar.setValue(50)
            Valves_function(pdf_path, special)
        else:
            print("Nothing Happened")

        self.CNICStudent.insertPlainText(f"{self.file} is saved in CSV_Output Folder.")
        self.progressBar.setValue(100)
        self.Customization.setCurrentText("None")
        self.selected_files = None

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
